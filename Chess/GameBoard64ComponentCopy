import model.Chess;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

/**
 * This class instantiates a Chess object, which is the model for the game.
 * As the user clicks the game board, the model is updated. Whenever the model
 * is updated, the game board repaints itself and updates its status JLabel to
 * reflect the current state of the model.
 *
 * This game adheres to a Model-View-Controller design framework.  This
 * framework is very effective for turn-based games.
 *
 * In a Model-View-Controller framework, GameBoard stores the model as a field
 * and acts as both the controller (with a MouseListener) and the view (with
 * its paintComponent method and the status JLabel).
 */
@SuppressWarnings("serial")
public class GameBoard extends JComponent {

    private Chess chess; // model for the game
    private JLabel status; // current status text
    private BoardSquare2[][] board; // board to paint

    // Game constants
    public static final int BOARD_DIM = 800;

    /**
     * Initializes the game board.
     */
    public GameBoard(JLabel statusInit) {
        // creates border around the court area, JComponent method
        setBorder(BorderFactory.createLineBorder(Color.BLACK));

        // Enable keyboard focus on the court area.
        // When this component has the keyboard focus, key events are handled by its key listener.
        setFocusable(true);

        chess = new Chess(); // initializes model for the game
        status = statusInit; // initializes the status JLabel

        /*
         * Listens for mouseclicks.  Updates the model, then updates the game board
         * based off of the updated model.
         */
        addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                Point p = e.getPoint();

                // updates the model given the coordinates of the mouseclick
                chess.playTurn(p.x / 100, p.y / 100);

                updateStatus(); // updates the status JLabel
                repaint(); // repaints the game board
            }
        });

    }

    /**
     * (Re-)sets the game to its initial state.
     */
    public void reset() {
        chess.reset();
        status.setText("Player 1's Turn");

        setLayout(new GridLayout(8, 8));
//        JButton b1 = new JButton("hello");
//        JButton b2 = new JButton("hello 2");
//
//        add(b1);
//        add(b2);
//
//        b1.addMouseListener(new MouseAdapter() {
//            public void mousePressed(MouseEvent evt) {
//                System.out.println("success");
//            }
//        });
//        b1.addMouseListener(new MouseAdapter() {
//            public void mousePressed(MouseEvent evt) {
//                System.out.println("success 2");
//            }
//        });
        // add(new BoardSquare2(true, 100, ))

        // add(new BoardSquare2(false, 100));
        // add(new BoardSquare2(false, 100));

        // generate initial colored board
        board = new BoardSquare2[8][8];
        int squareDim = BOARD_DIM/8;
        for (int r = 0; r < 8; r++) {
            boolean isLight = r%2 == 0;
            for (int c = 0; c < 8; c++) {
                board[r][c] = new BoardSquare2(isLight, squareDim);
                board[r][c].setPiece(chess.getCell(r, c));
                add(board[r][c]);

                board[r][c].addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        System.out.println("Square clicked");
                    }
                });

                isLight = !isLight;
            }
        }

        repaint();

        // Makes sure this component has keyboard/mouse focus
        requestFocusInWindow();
    }

    /**
     * Updates the JLabel to reflect the current state of the game.
     */
    private void updateStatus() {
        if (chess.getCurrentPlayer()) {
            status.setText("Player 1's Turn");
        } else {
            status.setText("Player 2's Turn");
        }

        int winner = chess.checkWinner();
        if (winner == 1) {
            status.setText("Player 1 wins!!!");
        } else if (winner == 2) {
            status.setText("Player 2 wins!!!");
        } else if (winner == 3) {
            status.setText("It's a tie.");
        }
    }

    /**
     * Draws the game board.
     *
     * There are many ways to draw a game board.  This approach
     * will not be sufficient for most games, because it is not
     * modular.  All of the logic for drawing the game board is
     * in this method, and it does not take advantage of helper
     * methods.  Consider breaking up your paintComponent logic
     * into multiple methods or classes, like Mushroom of Doom.
     */
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

//        // Draw board squares
//        for (int r = 0; r < 8; r++) {
//            for (int c = 0; c < 8; c++) {
//                String piece = chess.getCell(r, c);
//                board[r][c].setPiece(piece);
//            }
//        }
    }

    /**
     * Returns the size of the game board.
     */
    @Override
    public Dimension getPreferredSize() {
        return new Dimension(BOARD_DIM, BOARD_DIM);
    }
}